# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rp_hw_calib_py
else:
    import _rp_hw_calib_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_p_rp_calib_params_t():
    return _rp_hw_calib_py.new_p_rp_calib_params_t()

def copy_p_rp_calib_params_t(value):
    return _rp_hw_calib_py.copy_p_rp_calib_params_t(value)

def delete_p_rp_calib_params_t(obj):
    return _rp_hw_calib_py.delete_p_rp_calib_params_t(obj)

def p_rp_calib_params_t_assign(obj, value):
    return _rp_hw_calib_py.p_rp_calib_params_t_assign(obj, value)

def p_rp_calib_params_t_value(obj):
    return _rp_hw_calib_py.p_rp_calib_params_t_value(obj)

def new_p_channel_filter_t():
    return _rp_hw_calib_py.new_p_channel_filter_t()

def copy_p_channel_filter_t(value):
    return _rp_hw_calib_py.copy_p_channel_filter_t(value)

def delete_p_channel_filter_t(obj):
    return _rp_hw_calib_py.delete_p_channel_filter_t(obj)

def p_channel_filter_t_assign(obj, value):
    return _rp_hw_calib_py.p_channel_filter_t_assign(obj, value)

def p_channel_filter_t_value(obj):
    return _rp_hw_calib_py.p_channel_filter_t_value(obj)

def new_p_uint_gain_calib_t():
    return _rp_hw_calib_py.new_p_uint_gain_calib_t()

def copy_p_uint_gain_calib_t(value):
    return _rp_hw_calib_py.copy_p_uint_gain_calib_t(value)

def delete_p_uint_gain_calib_t(obj):
    return _rp_hw_calib_py.delete_p_uint_gain_calib_t(obj)

def p_uint_gain_calib_t_assign(obj, value):
    return _rp_hw_calib_py.p_uint_gain_calib_t_assign(obj, value)

def p_uint_gain_calib_t_value(obj):
    return _rp_hw_calib_py.p_uint_gain_calib_t_value(obj)

def new_puint8():
    return _rp_hw_calib_py.new_puint8()

def copy_puint8(value):
    return _rp_hw_calib_py.copy_puint8(value)

def delete_puint8(obj):
    return _rp_hw_calib_py.delete_puint8(obj)

def puint8_assign(obj, value):
    return _rp_hw_calib_py.puint8_assign(obj, value)

def puint8_value(obj):
    return _rp_hw_calib_py.puint8_value(obj)
class uint8Arr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_hw_calib_py.uint8Arr_swiginit(self, _rp_hw_calib_py.new_uint8Arr(nelements))
    __swig_destroy__ = _rp_hw_calib_py.delete_uint8Arr

    def __getitem__(self, index):
        return _rp_hw_calib_py.uint8Arr___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_hw_calib_py.uint8Arr___setitem__(self, index, value)

    def cast(self):
        return _rp_hw_calib_py.uint8Arr_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_hw_calib_py.uint8Arr_frompointer(t)

# Register uint8Arr in _rp_hw_calib_py:
_rp_hw_calib_py.uint8Arr_swigregister(uint8Arr)

def uint8Arr_frompointer(t):
    return _rp_hw_calib_py.uint8Arr_frompointer(t)


def new_cCalibArr(nelements):
    return _rp_hw_calib_py.new_cCalibArr(nelements)

def delete_cCalibArr(ary):
    return _rp_hw_calib_py.delete_cCalibArr(ary)

def cCalibArr_getitem(ary, index):
    return _rp_hw_calib_py.cCalibArr_getitem(ary, index)

def cCalibArr_setitem(ary, index, value):
    return _rp_hw_calib_py.cCalibArr_setitem(ary, index, value)

def new_cFilterArr(nelements):
    return _rp_hw_calib_py.new_cFilterArr(nelements)

def delete_cFilterArr(ary):
    return _rp_hw_calib_py.delete_cFilterArr(ary)

def cFilterArr_getitem(ary, index):
    return _rp_hw_calib_py.cFilterArr_getitem(ary, index)

def cFilterArr_setitem(ary, index, value):
    return _rp_hw_calib_py.cFilterArr_setitem(ary, index, value)

def new_ceppromUniDataArr(nelements):
    return _rp_hw_calib_py.new_ceppromUniDataArr(nelements)

def delete_ceppromUniDataArr(ary):
    return _rp_hw_calib_py.delete_ceppromUniDataArr(ary)

def ceppromUniDataArr_getitem(ary, index):
    return _rp_hw_calib_py.ceppromUniDataArr_getitem(ary, index)

def ceppromUniDataArr_setitem(ary, index, value):
    return _rp_hw_calib_py.ceppromUniDataArr_setitem(ary, index, value)
RP_HW_CALIB_OK = _rp_hw_calib_py.RP_HW_CALIB_OK
RP_HW_CALIB_ERE = _rp_hw_calib_py.RP_HW_CALIB_ERE
RP_HW_CALIB_EWE = _rp_hw_calib_py.RP_HW_CALIB_EWE
RP_HW_CALIB_ENI = _rp_hw_calib_py.RP_HW_CALIB_ENI
RP_HW_CALIB_EDM = _rp_hw_calib_py.RP_HW_CALIB_EDM
RP_HW_CALIB_ECH = _rp_hw_calib_py.RP_HW_CALIB_ECH
RP_HW_CALIB_EIP = _rp_hw_calib_py.RP_HW_CALIB_EIP
RP_HW_CALIB_EA = _rp_hw_calib_py.RP_HW_CALIB_EA
RP_HW_PACK_ID_V1 = _rp_hw_calib_py.RP_HW_PACK_ID_V1
RP_HW_PACK_ID_V2 = _rp_hw_calib_py.RP_HW_PACK_ID_V2
RP_HW_PACK_ID_V3 = _rp_hw_calib_py.RP_HW_PACK_ID_V3
RP_HW_PACK_ID_V4 = _rp_hw_calib_py.RP_HW_PACK_ID_V4
RP_HW_PACK_ID_V5 = _rp_hw_calib_py.RP_HW_PACK_ID_V5
MAX_UNIVERSAL_ITEMS_COUNT = _rp_hw_calib_py.MAX_UNIVERSAL_ITEMS_COUNT
RP_CH_1_CALIB = _rp_hw_calib_py.RP_CH_1_CALIB
RP_CH_2_CALIB = _rp_hw_calib_py.RP_CH_2_CALIB
RP_CH_3_CALIB = _rp_hw_calib_py.RP_CH_3_CALIB
RP_CH_4_CALIB = _rp_hw_calib_py.RP_CH_4_CALIB
RP_GAIN_CALIB_1X = _rp_hw_calib_py.RP_GAIN_CALIB_1X
RP_GAIN_CALIB_5X = _rp_hw_calib_py.RP_GAIN_CALIB_5X
RP_DC_CALIB = _rp_hw_calib_py.RP_DC_CALIB
RP_AC_CALIB = _rp_hw_calib_py.RP_AC_CALIB
class uint_gain_calib_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gain = property(_rp_hw_calib_py.uint_gain_calib_t_gain_get, _rp_hw_calib_py.uint_gain_calib_t_gain_set)
    base = property(_rp_hw_calib_py.uint_gain_calib_t_base_get, _rp_hw_calib_py.uint_gain_calib_t_base_set)
    precision = property(_rp_hw_calib_py.uint_gain_calib_t_precision_get, _rp_hw_calib_py.uint_gain_calib_t_precision_set)
    offset = property(_rp_hw_calib_py.uint_gain_calib_t_offset_get, _rp_hw_calib_py.uint_gain_calib_t_offset_set)

    def __init__(self):
        _rp_hw_calib_py.uint_gain_calib_t_swiginit(self, _rp_hw_calib_py.new_uint_gain_calib_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_uint_gain_calib_t

# Register uint_gain_calib_t in _rp_hw_calib_py:
_rp_hw_calib_py.uint_gain_calib_t_swigregister(uint_gain_calib_t)

class channel_calib_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    baseScale = property(_rp_hw_calib_py.channel_calib_t_baseScale_get, _rp_hw_calib_py.channel_calib_t_baseScale_set)
    calibValue = property(_rp_hw_calib_py.channel_calib_t_calibValue_get, _rp_hw_calib_py.channel_calib_t_calibValue_set)
    offset = property(_rp_hw_calib_py.channel_calib_t_offset_get, _rp_hw_calib_py.channel_calib_t_offset_set)
    gainCalc = property(_rp_hw_calib_py.channel_calib_t_gainCalc_get, _rp_hw_calib_py.channel_calib_t_gainCalc_set)

    def __init__(self):
        _rp_hw_calib_py.channel_calib_t_swiginit(self, _rp_hw_calib_py.new_channel_calib_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_channel_calib_t

# Register channel_calib_t in _rp_hw_calib_py:
_rp_hw_calib_py.channel_calib_t_swigregister(channel_calib_t)

class channel_filter_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aa = property(_rp_hw_calib_py.channel_filter_t_aa_get, _rp_hw_calib_py.channel_filter_t_aa_set)
    bb = property(_rp_hw_calib_py.channel_filter_t_bb_get, _rp_hw_calib_py.channel_filter_t_bb_set)
    pp = property(_rp_hw_calib_py.channel_filter_t_pp_get, _rp_hw_calib_py.channel_filter_t_pp_set)
    kk = property(_rp_hw_calib_py.channel_filter_t_kk_get, _rp_hw_calib_py.channel_filter_t_kk_set)

    def __init__(self):
        _rp_hw_calib_py.channel_filter_t_swiginit(self, _rp_hw_calib_py.new_channel_filter_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_channel_filter_t

# Register channel_filter_t in _rp_hw_calib_py:
_rp_hw_calib_py.channel_filter_t_swigregister(channel_filter_t)

class rp_calib_params_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataStructureId = property(_rp_hw_calib_py.rp_calib_params_t_dataStructureId_get, _rp_hw_calib_py.rp_calib_params_t_dataStructureId_set)
    wpCheck = property(_rp_hw_calib_py.rp_calib_params_t_wpCheck_get, _rp_hw_calib_py.rp_calib_params_t_wpCheck_set)
    fast_adc_count_1_1 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_1_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_1_set)
    fast_adc_1_1 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_1_1_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_1_1_set)
    fast_adc_filter_1_1 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_filter_1_1_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_filter_1_1_set)
    fast_adc_count_1_20 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_20_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_20_set)
    fast_adc_1_20 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_1_20_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_1_20_set)
    fast_adc_filter_1_20 = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_filter_1_20_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_filter_1_20_set)
    fast_adc_count_1_1_ac = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_1_ac_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_1_ac_set)
    fast_adc_1_1_ac = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_1_1_ac_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_1_1_ac_set)
    fast_adc_count_1_20_ac = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_20_ac_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_count_1_20_ac_set)
    fast_adc_1_20_ac = property(_rp_hw_calib_py.rp_calib_params_t_fast_adc_1_20_ac_get, _rp_hw_calib_py.rp_calib_params_t_fast_adc_1_20_ac_set)
    fast_dac_count_x1 = property(_rp_hw_calib_py.rp_calib_params_t_fast_dac_count_x1_get, _rp_hw_calib_py.rp_calib_params_t_fast_dac_count_x1_set)
    fast_dac_x1 = property(_rp_hw_calib_py.rp_calib_params_t_fast_dac_x1_get, _rp_hw_calib_py.rp_calib_params_t_fast_dac_x1_set)
    fast_dac_count_x5 = property(_rp_hw_calib_py.rp_calib_params_t_fast_dac_count_x5_get, _rp_hw_calib_py.rp_calib_params_t_fast_dac_count_x5_set)
    fast_dac_x5 = property(_rp_hw_calib_py.rp_calib_params_t_fast_dac_x5_get, _rp_hw_calib_py.rp_calib_params_t_fast_dac_x5_set)

    def __init__(self):
        _rp_hw_calib_py.rp_calib_params_t_swiginit(self, _rp_hw_calib_py.new_rp_calib_params_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_rp_calib_params_t

# Register rp_calib_params_t in _rp_hw_calib_py:
_rp_hw_calib_py.rp_calib_params_t_swigregister(rp_calib_params_t)

class rp_eepromWpData_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataStructureId = property(_rp_hw_calib_py.rp_eepromWpData_t_dataStructureId_get, _rp_hw_calib_py.rp_eepromWpData_t_dataStructureId_set)
    wpCheck = property(_rp_hw_calib_py.rp_eepromWpData_t_wpCheck_get, _rp_hw_calib_py.rp_eepromWpData_t_wpCheck_set)
    reserved = property(_rp_hw_calib_py.rp_eepromWpData_t_reserved_get, _rp_hw_calib_py.rp_eepromWpData_t_reserved_set)
    feCalPar = property(_rp_hw_calib_py.rp_eepromWpData_t_feCalPar_get, _rp_hw_calib_py.rp_eepromWpData_t_feCalPar_set)

    def __init__(self):
        _rp_hw_calib_py.rp_eepromWpData_t_swiginit(self, _rp_hw_calib_py.new_rp_eepromWpData_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_rp_eepromWpData_t

# Register rp_eepromWpData_t in _rp_hw_calib_py:
_rp_hw_calib_py.rp_eepromWpData_t_swigregister(rp_eepromWpData_t)

class rp_eepromUniData_item_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_rp_hw_calib_py.rp_eepromUniData_item_t_id_get, _rp_hw_calib_py.rp_eepromUniData_item_t_id_set)
    value = property(_rp_hw_calib_py.rp_eepromUniData_item_t_value_get, _rp_hw_calib_py.rp_eepromUniData_item_t_value_set)

    def __init__(self):
        _rp_hw_calib_py.rp_eepromUniData_item_t_swiginit(self, _rp_hw_calib_py.new_rp_eepromUniData_item_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_rp_eepromUniData_item_t

# Register rp_eepromUniData_item_t in _rp_hw_calib_py:
_rp_hw_calib_py.rp_eepromUniData_item_t_swigregister(rp_eepromUniData_item_t)

class rp_eepromUniData_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataStructureId = property(_rp_hw_calib_py.rp_eepromUniData_t_dataStructureId_get, _rp_hw_calib_py.rp_eepromUniData_t_dataStructureId_set)
    wpCheck = property(_rp_hw_calib_py.rp_eepromUniData_t_wpCheck_get, _rp_hw_calib_py.rp_eepromUniData_t_wpCheck_set)
    count = property(_rp_hw_calib_py.rp_eepromUniData_t_count_get, _rp_hw_calib_py.rp_eepromUniData_t_count_set)
    reserved = property(_rp_hw_calib_py.rp_eepromUniData_t_reserved_get, _rp_hw_calib_py.rp_eepromUniData_t_reserved_set)
    item = property(_rp_hw_calib_py.rp_eepromUniData_t_item_get, _rp_hw_calib_py.rp_eepromUniData_t_item_set)

    def __init__(self):
        _rp_hw_calib_py.rp_eepromUniData_t_swiginit(self, _rp_hw_calib_py.new_rp_eepromUniData_t())
    __swig_destroy__ = _rp_hw_calib_py.delete_rp_eepromUniData_t

# Register rp_eepromUniData_t in _rp_hw_calib_py:
_rp_hw_calib_py.rp_eepromUniData_t_swigregister(rp_eepromUniData_t)


def rp_CalibInit():
    return _rp_hw_calib_py.rp_CalibInit()

def rp_CalibInitSpecific(model):
    return _rp_hw_calib_py.rp_CalibInitSpecific(model)

def rp_GetCalibrationSettings():
    return _rp_hw_calib_py.rp_GetCalibrationSettings()

def rp_GetDefaultCalibrationSettings():
    return _rp_hw_calib_py.rp_GetDefaultCalibrationSettings()

def rp_CalibrationReset(use_factory_zone, is_new_format):
    return _rp_hw_calib_py.rp_CalibrationReset(use_factory_zone, is_new_format)

def rp_CalibrationFactoryReset(convert_to_new):
    return _rp_hw_calib_py.rp_CalibrationFactoryReset(convert_to_new)

def rp_CalibrationWriteParams(calib_params, use_factory_zone):
    return _rp_hw_calib_py.rp_CalibrationWriteParams(calib_params, use_factory_zone)

def rp_CalibrationSetParams(calib_params):
    return _rp_hw_calib_py.rp_CalibrationSetParams(calib_params)

def rp_CalibGetEEPROM(use_factory_zone):
    return _rp_hw_calib_py.rp_CalibGetEEPROM(use_factory_zone)

def rp_CalibConvertEEPROM(data, size, _out_calib):
    return _rp_hw_calib_py.rp_CalibConvertEEPROM(data, size, _out_calib)

def rp_GetNameOfUniversalId(id):
    return _rp_hw_calib_py.rp_GetNameOfUniversalId(id)

def rp_CalibPrint(calib):
    return _rp_hw_calib_py.rp_CalibPrint(calib)

def rp_CalibGetFastADCFilter(channel, _out_value):
    return _rp_hw_calib_py.rp_CalibGetFastADCFilter(channel, _out_value)

def rp_CalibGetFastADCFilter_1_20(channel, _out_value):
    return _rp_hw_calib_py.rp_CalibGetFastADCFilter_1_20(channel, _out_value)

def rp_CalibGetFastADCCalibValue(channel, mode):
    return _rp_hw_calib_py.rp_CalibGetFastADCCalibValue(channel, mode)

def rp_CalibGetFastADCCalibValueI(channel, mode, _out_calib):
    return _rp_hw_calib_py.rp_CalibGetFastADCCalibValueI(channel, mode, _out_calib)

def rp_CalibGetFastADCCalibValue_1_20(channel, mode):
    return _rp_hw_calib_py.rp_CalibGetFastADCCalibValue_1_20(channel, mode)

def rp_CalibGetFastADCCalibValue_1_20I(channel, mode, _out_calib):
    return _rp_hw_calib_py.rp_CalibGetFastADCCalibValue_1_20I(channel, mode, _out_calib)

def rp_CalibGetFastDACCalibValue(channel, mode):
    return _rp_hw_calib_py.rp_CalibGetFastDACCalibValue(channel, mode)

def rp_CalibGetFastDACCalibValueI(channel, mode, _out_calib):
    return _rp_hw_calib_py.rp_CalibGetFastDACCalibValueI(channel, mode, _out_calib)


