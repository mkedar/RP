# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rp_hw_py
else:
    import _rp_hw_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_hw_py.Buffer_swiginit(self, _rp_hw_py.new_Buffer(nelements))
    __swig_destroy__ = _rp_hw_py.delete_Buffer

    def __getitem__(self, index):
        return _rp_hw_py.Buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_hw_py.Buffer___setitem__(self, index, value)

    def cast(self):
        return _rp_hw_py.Buffer_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_hw_py.Buffer_frompointer(t)

# Register Buffer in _rp_hw_py:
_rp_hw_py.Buffer_swigregister(Buffer)

def Buffer_frompointer(t):
    return _rp_hw_py.Buffer_frompointer(t)

RP_HW_OK = _rp_hw_py.RP_HW_OK
RP_HW_EAL = _rp_hw_py.RP_HW_EAL
RP_HW_EUTO = _rp_hw_py.RP_HW_EUTO
RP_HW_EIPV = _rp_hw_py.RP_HW_EIPV
RP_HW_EUF = _rp_hw_py.RP_HW_EUF
RP_HW_EIU = _rp_hw_py.RP_HW_EIU
RP_HW_ERU = _rp_hw_py.RP_HW_ERU
RP_HW_EWU = _rp_hw_py.RP_HW_EWU
RP_HW_ESU = _rp_hw_py.RP_HW_ESU
RP_HW_EGU = _rp_hw_py.RP_HW_EGU
RP_HW_EIS = _rp_hw_py.RP_HW_EIS
RP_HW_ESGS = _rp_hw_py.RP_HW_ESGS
RP_HW_ESSS = _rp_hw_py.RP_HW_ESSS
RP_HW_EST = _rp_hw_py.RP_HW_EST
RP_HW_ESMI = _rp_hw_py.RP_HW_ESMI
RP_HW_ESMO = _rp_hw_py.RP_HW_ESMO
RP_HW_EIIIC = _rp_hw_py.RP_HW_EIIIC
RP_HW_ERIIC = _rp_hw_py.RP_HW_ERIIC
RP_HW_EWIIC = _rp_hw_py.RP_HW_EWIIC
RP_HW_ESIIC = _rp_hw_py.RP_HW_ESIIC
RP_HW_EBIIC = _rp_hw_py.RP_HW_EBIIC
RP_UART_CS6 = _rp_hw_py.RP_UART_CS6
RP_UART_CS7 = _rp_hw_py.RP_UART_CS7
RP_UART_CS8 = _rp_hw_py.RP_UART_CS8
RP_UART_STOP1 = _rp_hw_py.RP_UART_STOP1
RP_UART_STOP2 = _rp_hw_py.RP_UART_STOP2
RP_UART_NONE = _rp_hw_py.RP_UART_NONE
RP_UART_EVEN = _rp_hw_py.RP_UART_EVEN
RP_UART_ODD = _rp_hw_py.RP_UART_ODD
RP_UART_MARK = _rp_hw_py.RP_UART_MARK
RP_UART_SPACE = _rp_hw_py.RP_UART_SPACE
RP_SPI_MODE_LISL = _rp_hw_py.RP_SPI_MODE_LISL
RP_SPI_MODE_LIST = _rp_hw_py.RP_SPI_MODE_LIST
RP_SPI_MODE_HISL = _rp_hw_py.RP_SPI_MODE_HISL
RP_SPI_MODE_HIST = _rp_hw_py.RP_SPI_MODE_HIST
RP_SPI_ORDER_BIT_MSB = _rp_hw_py.RP_SPI_ORDER_BIT_MSB
RP_SPI_ORDER_BIT_LSB = _rp_hw_py.RP_SPI_ORDER_BIT_LSB
RP_SPI_STATE_NOT = _rp_hw_py.RP_SPI_STATE_NOT
RP_SPI_STATE_READY = _rp_hw_py.RP_SPI_STATE_READY
RP_SPI_CS_NORMAL = _rp_hw_py.RP_SPI_CS_NORMAL
RP_SPI_CS_HIGH = _rp_hw_py.RP_SPI_CS_HIGH

def rp_UartInit():
    return _rp_hw_py.rp_UartInit()

def rp_UartRelease():
    return _rp_hw_py.rp_UartRelease()

def rp_UartSetSettings():
    return _rp_hw_py.rp_UartSetSettings()

def rp_UartSetTimeout(deca_sec):
    return _rp_hw_py.rp_UartSetTimeout(deca_sec)

def rp_UartGetTimeout():
    return _rp_hw_py.rp_UartGetTimeout()

def rp_UartRead(buffer, _in_out_size):
    return _rp_hw_py.rp_UartRead(buffer, _in_out_size)

def rp_UartWrite(buffer, size):
    return _rp_hw_py.rp_UartWrite(buffer, size)

def rp_UartSetSpeed(speed):
    return _rp_hw_py.rp_UartSetSpeed(speed)

def rp_UartGetSpeed():
    return _rp_hw_py.rp_UartGetSpeed()

def rp_UartSetBits(size):
    return _rp_hw_py.rp_UartSetBits(size)

def rp_UartGetBits():
    return _rp_hw_py.rp_UartGetBits()

def rp_UartSetStopBits(mode):
    return _rp_hw_py.rp_UartSetStopBits(mode)

def rp_UartGetStopBits():
    return _rp_hw_py.rp_UartGetStopBits()

def rp_UartSetParityMode(mode):
    return _rp_hw_py.rp_UartSetParityMode(mode)

def rp_UartGetParityMode():
    return _rp_hw_py.rp_UartGetParityMode()

def rp_GetLEDMMCState():
    return _rp_hw_py.rp_GetLEDMMCState()

def rp_SetLEDMMCState(_enable):
    return _rp_hw_py.rp_SetLEDMMCState(_enable)

def rp_GetLEDHeartBeatState():
    return _rp_hw_py.rp_GetLEDHeartBeatState()

def rp_SetLEDHeartBeatState(_enable):
    return _rp_hw_py.rp_SetLEDHeartBeatState(_enable)

def rp_GetLEDEthState():
    return _rp_hw_py.rp_GetLEDEthState()

def rp_SetLEDEthState(_state):
    return _rp_hw_py.rp_SetLEDEthState(_state)

def rp_SPI_Init():
    return _rp_hw_py.rp_SPI_Init()

def rp_SPI_InitDevice(device):
    return _rp_hw_py.rp_SPI_InitDevice(device)

def rp_SPI_SetDefaultSettings():
    return _rp_hw_py.rp_SPI_SetDefaultSettings()

def rp_SPI_GetSettings():
    return _rp_hw_py.rp_SPI_GetSettings()

def rp_SPI_SetSettings():
    return _rp_hw_py.rp_SPI_SetSettings()

def rp_SPI_Release():
    return _rp_hw_py.rp_SPI_Release()

def rp_SPI_CreateMessage(len):
    return _rp_hw_py.rp_SPI_CreateMessage(len)

def rp_SPI_GetMessageLen():
    return _rp_hw_py.rp_SPI_GetMessageLen()

def rp_SPI_GetRxBuffer(msg):
    return _rp_hw_py.rp_SPI_GetRxBuffer(msg)

def rp_SPI_GetTxBuffer(msg):
    return _rp_hw_py.rp_SPI_GetTxBuffer(msg)

def rp_SPI_GetCSChangeState(msg):
    return _rp_hw_py.rp_SPI_GetCSChangeState(msg)

def rp_SPI_SetBufferForMessage(msg, tx_buffer, init_rx_buffer, len, cs_change):
    return _rp_hw_py.rp_SPI_SetBufferForMessage(msg, tx_buffer, init_rx_buffer, len, cs_change)

def rp_SPI_DestoryMessage():
    return _rp_hw_py.rp_SPI_DestoryMessage()

def rp_SPI_GetMode():
    return _rp_hw_py.rp_SPI_GetMode()

def rp_SPI_SetMode(mode):
    return _rp_hw_py.rp_SPI_SetMode(mode)

def rp_SPI_GetState():
    return _rp_hw_py.rp_SPI_GetState()

def rp_SPI_SetState(state):
    return _rp_hw_py.rp_SPI_SetState(state)

def rp_SPI_GetCSMode():
    return _rp_hw_py.rp_SPI_GetCSMode()

def rp_SPI_SetCSMode(mode):
    return _rp_hw_py.rp_SPI_SetCSMode(mode)

def rp_SPI_GetOrderBit():
    return _rp_hw_py.rp_SPI_GetOrderBit()

def rp_SPI_SetOrderBit(order):
    return _rp_hw_py.rp_SPI_SetOrderBit(order)

def rp_SPI_GetSpeed():
    return _rp_hw_py.rp_SPI_GetSpeed()

def rp_SPI_SetSpeed(speed):
    return _rp_hw_py.rp_SPI_SetSpeed(speed)

def rp_SPI_GetWordLen():
    return _rp_hw_py.rp_SPI_GetWordLen()

def rp_SPI_SetWordLen(len):
    return _rp_hw_py.rp_SPI_SetWordLen(len)

def rp_SPI_ReadWrite():
    return _rp_hw_py.rp_SPI_ReadWrite()

def rp_I2C_InitDevice(device, addr):
    return _rp_hw_py.rp_I2C_InitDevice(device, addr)

def rp_I2C_setForceMode(force):
    return _rp_hw_py.rp_I2C_setForceMode(force)

def rp_I2C_getForceMode():
    return _rp_hw_py.rp_I2C_getForceMode()

def rp_I2C_getDevAddress():
    return _rp_hw_py.rp_I2C_getDevAddress()

def rp_I2C_SMBUS_Read(reg):
    return _rp_hw_py.rp_I2C_SMBUS_Read(reg)

def rp_I2C_SMBUS_ReadWord(reg):
    return _rp_hw_py.rp_I2C_SMBUS_ReadWord(reg)

def rp_I2C_SMBUS_ReadCommand():
    return _rp_hw_py.rp_I2C_SMBUS_ReadCommand()

def rp_I2C_SMBUS_ReadBuffer(reg, buffer, _in_out_size):
    return _rp_hw_py.rp_I2C_SMBUS_ReadBuffer(reg, buffer, _in_out_size)

def rp_I2C_SMBUS_Write(reg, value):
    return _rp_hw_py.rp_I2C_SMBUS_Write(reg, value)

def rp_I2C_SMBUS_WriteWord(reg, value):
    return _rp_hw_py.rp_I2C_SMBUS_WriteWord(reg, value)

def rp_I2C_SMBUS_WriteCommand(value):
    return _rp_hw_py.rp_I2C_SMBUS_WriteCommand(value)

def rp_I2C_SMBUS_WriteBuffer(reg, buffer, len):
    return _rp_hw_py.rp_I2C_SMBUS_WriteBuffer(reg, buffer, len)

def rp_I2C_IOCTL_ReadBuffer(buffer, len):
    return _rp_hw_py.rp_I2C_IOCTL_ReadBuffer(buffer, len)

def rp_I2C_IOCTL_WriteBuffer(buffer, len):
    return _rp_hw_py.rp_I2C_IOCTL_WriteBuffer(buffer, len)

def rp_GetCPUTemperature():
    return _rp_hw_py.rp_GetCPUTemperature()

def rp_GetPowerI4():
    return _rp_hw_py.rp_GetPowerI4()

def rp_GetPowerVCCPINT():
    return _rp_hw_py.rp_GetPowerVCCPINT()

def rp_GetPowerVCCPAUX():
    return _rp_hw_py.rp_GetPowerVCCPAUX()

def rp_GetPowerVCCBRAM():
    return _rp_hw_py.rp_GetPowerVCCBRAM()

def rp_GetPowerVCCINT():
    return _rp_hw_py.rp_GetPowerVCCINT()

def rp_GetPowerVCCAUX():
    return _rp_hw_py.rp_GetPowerVCCAUX()

def rp_GetPowerVCCDDR():
    return _rp_hw_py.rp_GetPowerVCCDDR()


