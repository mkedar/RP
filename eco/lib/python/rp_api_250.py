# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rp_api_250_py
else:
    import _rp_api_250_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def rp_spi_enable_verbous():
    return _rp_api_250_py.rp_spi_enable_verbous()

def rp_spi_disable_verbous():
    return _rp_api_250_py.rp_spi_disable_verbous()

def rp_write_to_spi_fpga(spi_dev_path, fpga_address, dev_address, reg_addr, spi_val_to_write):
    return _rp_api_250_py.rp_write_to_spi_fpga(spi_dev_path, fpga_address, dev_address, reg_addr, spi_val_to_write)

def rp_read_from_spi_fpga(spi_dev_path, fpga_address, dev_address, reg_addr):
    return _rp_api_250_py.rp_read_from_spi_fpga(spi_dev_path, fpga_address, dev_address, reg_addr)

def rp_spi_load_via_fpga(configuration_file):
    return _rp_api_250_py.rp_spi_load_via_fpga(configuration_file)

def rp_i2c_enable_verbous():
    return _rp_api_250_py.rp_i2c_enable_verbous()

def rp_i2c_disable_verbous():
    return _rp_api_250_py.rp_i2c_disable_verbous()

def rp_i2c_load(configuration_file, force):
    return _rp_api_250_py.rp_i2c_load(configuration_file, force)

def rp_i2c_print(configuration_file, force):
    return _rp_api_250_py.rp_i2c_print(configuration_file, force)

def rp_i2c_compare(configuration_file, force):
    return _rp_api_250_py.rp_i2c_compare(configuration_file, force)

def rp_write_to_i2c(i2c_dev_path, i2c_dev_address, i2c_dev_reg_addr, i2c_val_to_write, force):
    return _rp_api_250_py.rp_write_to_i2c(i2c_dev_path, i2c_dev_address, i2c_dev_reg_addr, i2c_val_to_write, force)

def rp_read_from_i2c(i2c_dev_path, i2c_dev_address, i2c_dev_reg_addr, value, force):
    return _rp_api_250_py.rp_read_from_i2c(i2c_dev_path, i2c_dev_address, i2c_dev_reg_addr, value, force)
MCP47X6_DEFAULT_ADDRESS = _rp_api_250_py.MCP47X6_DEFAULT_ADDRESS
MCP47X6_GAIN_MASK = _rp_api_250_py.MCP47X6_GAIN_MASK
MCP47X6_GAIN_1X = _rp_api_250_py.MCP47X6_GAIN_1X
MCP47X6_GAIN_2X = _rp_api_250_py.MCP47X6_GAIN_2X
MCP47X6_PWRDN_MASK = _rp_api_250_py.MCP47X6_PWRDN_MASK
MCP47X6_AWAKE = _rp_api_250_py.MCP47X6_AWAKE
MCP47X6_PWRDN_1K = _rp_api_250_py.MCP47X6_PWRDN_1K
MCP47X6_PWRDN_100K = _rp_api_250_py.MCP47X6_PWRDN_100K
MCP47X6_PWRDN_500K = _rp_api_250_py.MCP47X6_PWRDN_500K
MCP47X6_VREF_MASK = _rp_api_250_py.MCP47X6_VREF_MASK
MCP47X6_VREF_VDD = _rp_api_250_py.MCP47X6_VREF_VDD
MCP47X6_VREF_VREFPIN = _rp_api_250_py.MCP47X6_VREF_VREFPIN
MCP47X6_VREF_VREFPIN_BUFFERED = _rp_api_250_py.MCP47X6_VREF_VREFPIN_BUFFERED
MCP47X6_CMD_MASK = _rp_api_250_py.MCP47X6_CMD_MASK
MCP47X6_CMD_VOLDAC = _rp_api_250_py.MCP47X6_CMD_VOLDAC
MCP47X6_CMD_VOLALL = _rp_api_250_py.MCP47X6_CMD_VOLALL
MCP47X6_CMD_VOLCONFIG = _rp_api_250_py.MCP47X6_CMD_VOLCONFIG
MCP47X6_CMD_ALL = _rp_api_250_py.MCP47X6_CMD_ALL
MCP4706 = _rp_api_250_py.MCP4706
MCP4716 = _rp_api_250_py.MCP4716
MCP4726 = _rp_api_250_py.MCP4726
class mcp47x6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rp_api_250_py.mcp47x6_swiginit(self, _rp_api_250_py.new_mcp47x6(*args))
    __swig_destroy__ = _rp_api_250_py.delete_mcp47x6

    def readConfig(self):
        return _rp_api_250_py.mcp47x6_readConfig(self)

    def writeConfig(self):
        return _rp_api_250_py.mcp47x6_writeConfig(self)

    def writeConfigAll(self):
        return _rp_api_250_py.mcp47x6_writeConfigAll(self)

    def setGain(self, gain):
        return _rp_api_250_py.mcp47x6_setGain(self, gain)

    def getGain(self):
        return _rp_api_250_py.mcp47x6_getGain(self)

    def getGainEeprom(self):
        return _rp_api_250_py.mcp47x6_getGainEeprom(self)

    def setPowerDown(self, pdOutR):
        return _rp_api_250_py.mcp47x6_setPowerDown(self, pdOutR)

    def getPowerDown(self):
        return _rp_api_250_py.mcp47x6_getPowerDown(self)

    def getPowerDownEeprom(self):
        return _rp_api_250_py.mcp47x6_getPowerDownEeprom(self)

    def setVReference(self, ref):
        return _rp_api_250_py.mcp47x6_setVReference(self, ref)

    def getVReferenc(self):
        return _rp_api_250_py.mcp47x6_getVReferenc(self)

    def getVReferencEeprom(self):
        return _rp_api_250_py.mcp47x6_getVReferencEeprom(self)

    def setOutputLevel(self, level):
        return _rp_api_250_py.mcp47x6_setOutputLevel(self, level)

    def getOutputLevel(self):
        return _rp_api_250_py.mcp47x6_getOutputLevel(self)

    def getOutputLevelEeprom(self):
        return _rp_api_250_py.mcp47x6_getOutputLevelEeprom(self)

    def getMaxLevel(self):
        return _rp_api_250_py.mcp47x6_getMaxLevel(self)

# Register mcp47x6 in _rp_api_250_py:
_rp_api_250_py.mcp47x6_swigregister(mcp47x6)

PIN_0 = _rp_api_250_py.PIN_0
PIN_1 = _rp_api_250_py.PIN_1
PIN_2 = _rp_api_250_py.PIN_2
PIN_3 = _rp_api_250_py.PIN_3
PIN_4 = _rp_api_250_py.PIN_4
PIN_5 = _rp_api_250_py.PIN_5
PIN_6 = _rp_api_250_py.PIN_6
PIN_7 = _rp_api_250_py.PIN_7
PIN_8 = _rp_api_250_py.PIN_8
PIN_9 = _rp_api_250_py.PIN_9
PIN_10 = _rp_api_250_py.PIN_10
PIN_11 = _rp_api_250_py.PIN_11
PIN_12 = _rp_api_250_py.PIN_12
PIN_13 = _rp_api_250_py.PIN_13
PIN_14 = _rp_api_250_py.PIN_14
PIN_15 = _rp_api_250_py.PIN_15
PIN_K1 = _rp_api_250_py.PIN_K1
PIN_K2 = _rp_api_250_py.PIN_K2
PIN_K3 = _rp_api_250_py.PIN_K3
PIN_K4 = _rp_api_250_py.PIN_K4
PIN_K5 = _rp_api_250_py.PIN_K5
PIN_K6 = _rp_api_250_py.PIN_K6

def initController(i2c_dev_path, address):
    return _rp_api_250_py.initController(i2c_dev_path, address)

def initControllerDefault():
    return _rp_api_250_py.initControllerDefault()

def getDefaultAddress():
    return _rp_api_250_py.getDefaultAddress()

def setPIN(pin, state):
    return _rp_api_250_py.setPIN(pin, state)

def getPIN(pin):
    return _rp_api_250_py.getPIN(pin)

def setPIN_EX(i2c_dev_path, address, pin, state):
    return _rp_api_250_py.setPIN_EX(i2c_dev_path, address, pin, state)

def getPIN_EX(i2c_dev_path, address, pin):
    return _rp_api_250_py.getPIN_EX(i2c_dev_path, address, pin)

def setSleepTime(time):
    return _rp_api_250_py.setSleepTime(time)

def setPIN_GROUP(pin_group, state):
    return _rp_api_250_py.setPIN_GROUP(pin_group, state)

def setPIN_GROUP_EX(i2c_dev_path, address, pin_group, state):
    return _rp_api_250_py.setPIN_GROUP_EX(i2c_dev_path, address, pin_group, state)
RP_MAX7311_IN1 = _rp_api_250_py.RP_MAX7311_IN1
RP_MAX7311_IN2 = _rp_api_250_py.RP_MAX7311_IN2
RP_MAX7311_OUT1 = _rp_api_250_py.RP_MAX7311_OUT1
RP_MAX7311_OUT2 = _rp_api_250_py.RP_MAX7311_OUT2
RP_AC_MODE = _rp_api_250_py.RP_AC_MODE
RP_DC_MODE = _rp_api_250_py.RP_DC_MODE
RP_ATTENUATOR_1_1 = _rp_api_250_py.RP_ATTENUATOR_1_1
RP_ATTENUATOR_1_20 = _rp_api_250_py.RP_ATTENUATOR_1_20
RP_GAIN_2V = _rp_api_250_py.RP_GAIN_2V
RP_GAIN_10V = _rp_api_250_py.RP_GAIN_10V

def rp_initController():
    return _rp_api_250_py.rp_initController()

def rp_setAC_DC(port, mode):
    return _rp_api_250_py.rp_setAC_DC(port, mode)

def rp_setAttenuator(port, mode):
    return _rp_api_250_py.rp_setAttenuator(port, mode)

def rp_setGainOut(port, mode):
    return _rp_api_250_py.rp_setGainOut(port, mode)

def rp_setSleepTime(time):
    return _rp_api_250_py.rp_setSleepTime(time)

def rp_check():
    return _rp_api_250_py.rp_check()
ADC_POWER = _rp_api_250_py.ADC_POWER
DAC_POWER = _rp_api_250_py.DAC_POWER
POWER_ON = _rp_api_250_py.POWER_ON
POWER_OFF = _rp_api_250_py.POWER_OFF

def rp_set_power_mode(module, state):
    return _rp_api_250_py.rp_set_power_mode(module, state)

def rp_get_power_mode(module):
    return _rp_api_250_py.rp_get_power_mode(module)


