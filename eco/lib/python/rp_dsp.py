# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rp_dsp_py
else:
    import _rp_dsp_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class arrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_dsp_py.arrDouble_swiginit(self, _rp_dsp_py.new_arrDouble(nelements))
    __swig_destroy__ = _rp_dsp_py.delete_arrDouble

    def __getitem__(self, index):
        return _rp_dsp_py.arrDouble___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_dsp_py.arrDouble___setitem__(self, index, value)

    def cast(self):
        return _rp_dsp_py.arrDouble_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_dsp_py.arrDouble_frompointer(t)

# Register arrDouble in _rp_dsp_py:
_rp_dsp_py.arrDouble_swigregister(arrDouble)

def arrDouble_frompointer(t):
    return _rp_dsp_py.arrDouble_frompointer(t)

class arrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_dsp_py.arrFloat_swiginit(self, _rp_dsp_py.new_arrFloat(nelements))
    __swig_destroy__ = _rp_dsp_py.delete_arrFloat

    def __getitem__(self, index):
        return _rp_dsp_py.arrFloat___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_dsp_py.arrFloat___setitem__(self, index, value)

    def cast(self):
        return _rp_dsp_py.arrFloat_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_dsp_py.arrFloat_frompointer(t)

# Register arrFloat in _rp_dsp_py:
_rp_dsp_py.arrFloat_swigregister(arrFloat)

def arrFloat_frompointer(t):
    return _rp_dsp_py.arrFloat_frompointer(t)

class arrpDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_dsp_py.arrpDouble_swiginit(self, _rp_dsp_py.new_arrpDouble(nelements))
    __swig_destroy__ = _rp_dsp_py.delete_arrpDouble

    def __getitem__(self, index):
        return _rp_dsp_py.arrpDouble___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_dsp_py.arrpDouble___setitem__(self, index, value)

    def cast(self):
        return _rp_dsp_py.arrpDouble_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_dsp_py.arrpDouble_frompointer(t)

# Register arrpDouble in _rp_dsp_py:
_rp_dsp_py.arrpDouble_swigregister(arrpDouble)

def arrpDouble_frompointer(t):
    return _rp_dsp_py.arrpDouble_frompointer(t)

class arrpFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _rp_dsp_py.arrpFloat_swiginit(self, _rp_dsp_py.new_arrpFloat(nelements))
    __swig_destroy__ = _rp_dsp_py.delete_arrpFloat

    def __getitem__(self, index):
        return _rp_dsp_py.arrpFloat___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rp_dsp_py.arrpFloat___setitem__(self, index, value)

    def cast(self):
        return _rp_dsp_py.arrpFloat_cast(self)

    @staticmethod
    def frompointer(t):
        return _rp_dsp_py.arrpFloat_frompointer(t)

# Register arrpFloat in _rp_dsp_py:
_rp_dsp_py.arrpFloat_swigregister(arrpFloat)

def arrpFloat_frompointer(t):
    return _rp_dsp_py.arrpFloat_frompointer(t)

RECTANGULAR = _rp_dsp_py.RECTANGULAR
HANNING = _rp_dsp_py.HANNING
HAMMING = _rp_dsp_py.HAMMING
BLACKMAN_HARRIS = _rp_dsp_py.BLACKMAN_HARRIS
FLAT_TOP = _rp_dsp_py.FLAT_TOP
KAISER_4 = _rp_dsp_py.KAISER_4
KAISER_8 = _rp_dsp_py.KAISER_8
DBM = _rp_dsp_py.DBM
VOLT = _rp_dsp_py.VOLT
DBU = _rp_dsp_py.DBU
class data_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_in = property(_rp_dsp_py.data_t_m_in_get, _rp_dsp_py.data_t_m_in_set)
    m_filtred = property(_rp_dsp_py.data_t_m_filtred_get, _rp_dsp_py.data_t_m_filtred_set)
    m_is_data_filtred = property(_rp_dsp_py.data_t_m_is_data_filtred_get, _rp_dsp_py.data_t_m_is_data_filtred_set)
    m_fft = property(_rp_dsp_py.data_t_m_fft_get, _rp_dsp_py.data_t_m_fft_set)
    m_freq_vector = property(_rp_dsp_py.data_t_m_freq_vector_get, _rp_dsp_py.data_t_m_freq_vector_set)
    m_decimated = property(_rp_dsp_py.data_t_m_decimated_get, _rp_dsp_py.data_t_m_decimated_set)
    m_converted = property(_rp_dsp_py.data_t_m_converted_get, _rp_dsp_py.data_t_m_converted_set)
    m_peak_power = property(_rp_dsp_py.data_t_m_peak_power_get, _rp_dsp_py.data_t_m_peak_power_set)
    m_peak_freq = property(_rp_dsp_py.data_t_m_peak_freq_get, _rp_dsp_py.data_t_m_peak_freq_set)
    m_channels = property(_rp_dsp_py.data_t_m_channels_get, _rp_dsp_py.data_t_m_channels_set)

    def reset(self):
        return _rp_dsp_py.data_t_reset(self)

    def __init__(self):
        _rp_dsp_py.data_t_swiginit(self, _rp_dsp_py.new_data_t())
    __swig_destroy__ = _rp_dsp_py.delete_data_t

# Register data_t in _rp_dsp_py:
_rp_dsp_py.data_t_swigregister(data_t)

class CDSP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, max_channels, adc_buffer, adc_max_speed):
        _rp_dsp_py.CDSP_swiginit(self, _rp_dsp_py.new_CDSP(max_channels, adc_buffer, adc_max_speed))
    __swig_destroy__ = _rp_dsp_py.delete_CDSP

    def createData(self):
        return _rp_dsp_py.CDSP_createData(self)

    def deleteData(self, data):
        return _rp_dsp_py.CDSP_deleteData(self, data)

    def setChannel(self, ch, enable):
        return _rp_dsp_py.CDSP_setChannel(self, ch, enable)

    def setSignalLength(self, len):
        return _rp_dsp_py.CDSP_setSignalLength(self, len)

    def getSignalLength(self):
        return _rp_dsp_py.CDSP_getSignalLength(self)

    def getSignalMaxLength(self):
        return _rp_dsp_py.CDSP_getSignalMaxLength(self)

    def getOutSignalLength(self):
        return _rp_dsp_py.CDSP_getOutSignalLength(self)

    def getOutSignalMaxLength(self):
        return _rp_dsp_py.CDSP_getOutSignalMaxLength(self)

    def window_init(self, mode):
        return _rp_dsp_py.CDSP_window_init(self, mode)

    def window_clean(self):
        return _rp_dsp_py.CDSP_window_clean(self)

    def getCurrentWindowMode(self):
        return _rp_dsp_py.CDSP_getCurrentWindowMode(self)

    def setImpedance(self, value):
        return _rp_dsp_py.CDSP_setImpedance(self, value)

    def getImpedance(self):
        return _rp_dsp_py.CDSP_getImpedance(self)

    def setRemoveDC(self, enable):
        return _rp_dsp_py.CDSP_setRemoveDC(self, enable)

    def getRemoveDC(self):
        return _rp_dsp_py.CDSP_getRemoveDC(self)

    def setMode(self, mode):
        return _rp_dsp_py.CDSP_setMode(self, mode)

    def getMode(self):
        return _rp_dsp_py.CDSP_getMode(self)

    def prepareFreqVector(self, data, adc_rate_f_s, decimation):
        return _rp_dsp_py.CDSP_prepareFreqVector(self, data, adc_rate_f_s, decimation)

    def windowFilter(self, data):
        return _rp_dsp_py.CDSP_windowFilter(self, data)

    def fftInit(self):
        return _rp_dsp_py.CDSP_fftInit(self)

    def fftClean(self):
        return _rp_dsp_py.CDSP_fftClean(self)

    def fft(self, data):
        return _rp_dsp_py.CDSP_fft(self, data)

    def decimate(self, data, in_len, out_len):
        return _rp_dsp_py.CDSP_decimate(self, data, in_len, out_len)

    def cnvToDBM(self, data, decimation):
        return _rp_dsp_py.CDSP_cnvToDBM(self, data, decimation)

    def cnvToDBMMaxValueRanged(self, data, decimation, minFreq, maxFreq):
        return _rp_dsp_py.CDSP_cnvToDBMMaxValueRanged(self, data, decimation, minFreq, maxFreq)

    def cnvToMetric(self, data, decimation):
        return _rp_dsp_py.CDSP_cnvToMetric(self, data, decimation)

    def remoteDCCount(self):
        return _rp_dsp_py.CDSP_remoteDCCount(self)

# Register CDSP in _rp_dsp_py:
_rp_dsp_py.CDSP_swigregister(CDSP)


def log10f_neon(x):
    return _rp_dsp_py.log10f_neon(x)

def sqrtf_neon(x):
    return _rp_dsp_py.sqrtf_neon(x)


